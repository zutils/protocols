// This file is generated by rust-protobuf 2.1.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct SignedMessage {
    // message fields
    pub uniqueId: ::std::string::String,
    pub message: ::std::vec::Vec<u8>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    cached_size: ::protobuf::CachedSize,
}

impl SignedMessage {
    pub fn new() -> SignedMessage {
        ::std::default::Default::default()
    }

    // string uniqueId = 1;

    pub fn clear_uniqueId(&mut self) {
        self.uniqueId.clear();
    }

    // Param is passed by value, moved
    pub fn set_uniqueId(&mut self, v: ::std::string::String) {
        self.uniqueId = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_uniqueId(&mut self) -> &mut ::std::string::String {
        &mut self.uniqueId
    }

    // Take field
    pub fn take_uniqueId(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.uniqueId, ::std::string::String::new())
    }

    pub fn get_uniqueId(&self) -> &str {
        &self.uniqueId
    }

    // bytes message = 2;

    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::vec::Vec<u8>) {
        self.message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.message
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.message, ::std::vec::Vec::new())
    }

    pub fn get_message(&self) -> &[u8] {
        &self.message
    }
}

impl ::protobuf::Message for SignedMessage {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.uniqueId)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.message)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.uniqueId.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.uniqueId);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.message);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.uniqueId.is_empty() {
            os.write_string(1, &self.uniqueId)?;
        }
        if !self.message.is_empty() {
            os.write_bytes(2, &self.message)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SignedMessage {
        SignedMessage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "uniqueId",
                    |m: &SignedMessage| { &m.uniqueId },
                    |m: &mut SignedMessage| { &mut m.uniqueId },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "message",
                    |m: &SignedMessage| { &m.message },
                    |m: &mut SignedMessage| { &mut m.message },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SignedMessage>(
                    "SignedMessage",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SignedMessage {
        static mut instance: ::protobuf::lazy::Lazy<SignedMessage> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SignedMessage,
        };
        unsafe {
            instance.get(SignedMessage::new)
        }
    }
}

impl ::protobuf::Clear for SignedMessage {
    fn clear(&mut self) {
        self.clear_uniqueId();
        self.clear_message();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SignedMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SignedMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct RootMessage {
    // message fields
    pub public_key: ::std::vec::Vec<u8>,
    pub message_type_hash: ::std::string::String,
    pub signed_message: ::protobuf::SingularPtrField<SignedMessage>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    cached_size: ::protobuf::CachedSize,
}

impl RootMessage {
    pub fn new() -> RootMessage {
        ::std::default::Default::default()
    }

    // bytes public_key = 1;

    pub fn clear_public_key(&mut self) {
        self.public_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_public_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.public_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_public_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.public_key
    }

    // Take field
    pub fn take_public_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.public_key, ::std::vec::Vec::new())
    }

    pub fn get_public_key(&self) -> &[u8] {
        &self.public_key
    }

    // string message_type_hash = 2;

    pub fn clear_message_type_hash(&mut self) {
        self.message_type_hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_message_type_hash(&mut self, v: ::std::string::String) {
        self.message_type_hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message_type_hash(&mut self) -> &mut ::std::string::String {
        &mut self.message_type_hash
    }

    // Take field
    pub fn take_message_type_hash(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.message_type_hash, ::std::string::String::new())
    }

    pub fn get_message_type_hash(&self) -> &str {
        &self.message_type_hash
    }

    // .SignedMessage signed_message = 3;

    pub fn clear_signed_message(&mut self) {
        self.signed_message.clear();
    }

    pub fn has_signed_message(&self) -> bool {
        self.signed_message.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signed_message(&mut self, v: SignedMessage) {
        self.signed_message = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signed_message(&mut self) -> &mut SignedMessage {
        if self.signed_message.is_none() {
            self.signed_message.set_default();
        }
        self.signed_message.as_mut().unwrap()
    }

    // Take field
    pub fn take_signed_message(&mut self) -> SignedMessage {
        self.signed_message.take().unwrap_or_else(|| SignedMessage::new())
    }

    pub fn get_signed_message(&self) -> &SignedMessage {
        self.signed_message.as_ref().unwrap_or_else(|| SignedMessage::default_instance())
    }
}

impl ::protobuf::Message for RootMessage {
    fn is_initialized(&self) -> bool {
        for v in &self.signed_message {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.public_key)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.message_type_hash)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.signed_message)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.public_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.public_key);
        }
        if !self.message_type_hash.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message_type_hash);
        }
        if let Some(ref v) = self.signed_message.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.public_key.is_empty() {
            os.write_bytes(1, &self.public_key)?;
        }
        if !self.message_type_hash.is_empty() {
            os.write_string(2, &self.message_type_hash)?;
        }
        if let Some(ref v) = self.signed_message.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RootMessage {
        RootMessage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "public_key",
                    |m: &RootMessage| { &m.public_key },
                    |m: &mut RootMessage| { &mut m.public_key },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "message_type_hash",
                    |m: &RootMessage| { &m.message_type_hash },
                    |m: &mut RootMessage| { &mut m.message_type_hash },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SignedMessage>>(
                    "signed_message",
                    |m: &RootMessage| { &m.signed_message },
                    |m: &mut RootMessage| { &mut m.signed_message },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RootMessage>(
                    "RootMessage",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RootMessage {
        static mut instance: ::protobuf::lazy::Lazy<RootMessage> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RootMessage,
        };
        unsafe {
            instance.get(RootMessage::new)
        }
    }
}

impl ::protobuf::Clear for RootMessage {
    fn clear(&mut self) {
        self.clear_public_key();
        self.clear_message_type_hash();
        self.clear_signed_message();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RootMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RootMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x18protos/rootmessage.proto\x12\0\":\n\rSignedMessage\x12\x14\n\x08un\
    iqueId\x18\x01\x20\x01(\tB\x02\x18\0\x12\x13\n\x07message\x18\x02\x20\
    \x01(\x0cB\x02\x18\0\"p\n\x0bRootMessage\x12\x16\n\npublic_key\x18\x01\
    \x20\x01(\x0cB\x02\x18\0\x12\x1d\n\x11message_type_hash\x18\x02\x20\x01(\
    \tB\x02\x18\0\x12*\n\x0esigned_message\x18\x03\x20\x01(\x0b2\x0e.SignedM\
    essageB\x02\x18\0B\0b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
