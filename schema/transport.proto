syntax = "proto3";

// This Schema represents how data will be sent to and from all foreign interfaces.
//  It will allow personal modules to be sent to dynamic libraries, webasm, and locally
//  Please NOTE: This is an INSECURE method of transport. All destinations for these messages should be FULLY TRUSTED!

message Schema {
    oneof data {
        string URL = 2;
        string Ipfs = 3;
        string Ipns = 4;
    }
}

message UUID { string id = 1; }

message Error { string error = 1; }

// Include data and the schema that can decode it.
message Data {
    Schema schema = 1;
    bytes serialized_data = 2;
}

// Include the method name and the serialized gRPC data.
message RpcData {
    string method_name = 1;
    bytes serialized_rpc_arg = 2;
    Schema schema = 3;
}

message ModuleInfo {
    Schema schema = 1;
    string name = 2;
}

message GenerateMessageInfo {
    string template = 1;
    repeated bytes args = 2;
    Schema schema = 3;
}

// Special case for functions that would normally take Destination
message Destination {
    Schema schema = 1;
}

message VecData { repeated Data vec = 1; }
message VecModuleInfo { repeated ModuleInfo vec = 1; }
message VecRpcData { repeated RpcData vec = 1; }

enum RequestType {
    NONE = 0;
    GET_INFO = 1;
    GENERATE_MESSAGE = 2;
    HANDLE_RAW = 3;
    RECEIVE_RPC_AS_CLIENT = 4;
    RECEIVE_RPC_AS_SERVER = 5;
    RECEIVE_PUBLIC_RPC = 6;
}


// Because we don't support generics - have a oneof for each result. The calling function should know which one it is expecting.
message DataType {
    oneof result {
        Error error = 1;
        Data data = 2;
        VecModuleInfo vecmoduleinfo = 3;
        RpcData rpcdata = 4;
        GenerateMessageInfo generatemessageinfo = 5;
        Destination destination = 6;
        VecData vecdata= 7;
        VecRpcData vecrpcdata = 8;
    }
}

// Any module that wants to communicate to another module in it's tree must send and receive "Transports"
message Transport {
    Schema destination = 1;
    DataType payload = 2;
    RequestType request_type = 3;
}

message VecTransport { repeated Transport vec = 1; }

service CommonModule {
    rpc get_info(Destination) returns (VecModuleInfo);
    rpc generate_message(GenerateMessageInfo) returns (Data);
    rpc handle_raw(Data) returns (VecData);
    rpc receive_rpc_as_client(RpcData) returns (VecRpcData);
    rpc receive_rpc_as_server(RpcData) returns (VecRpcData);
    rpc receive_public_rpc(RpcData) returns (VecRpcData);
}
