syntax = "proto2";

// This Schema represents how data will be sent to and from all foreign interfaces.
// It will allow data to be sent to dynamic libraries, wasm, and locally

message TypeDescriptor {
    required string libraryAlias = 1;  // alias for the Ipfs hash or url of a protobuf file
    required string structure = 2; // the actual structure name used to deserialize the data
}

message ModelDataChanges {
    required Id id = 1;
    required StructDataChanges changes = 2;
}

message StructDataChanges {
    required bytes serializedData = 1;  
    repeated string dirtyProperties = 2; // The exact properties that have changed.
    required TypeDescriptor descriptor = 3;
}

message ModuleId { required string val = 1; }
message Id { required string val = 1; } 

message ConstructorData {
    required Id id = 1; // So the module can reference this object.
    required TypeDescriptor descriptor = 2; // Maps to the necessary module.
    optional bytes serializedData = 3; // The initialization data for this object. None is default.
}

message DestructorData {
    required Id id = 1; // So the module can reference this object.
    required TypeDescriptor descriptor = 2; // Maps to the necessary module.
}

message UpdateModelData {
    required Id id = 1;
    required ModelDataChanges changes = 2;
}

message ProcessStructData {
    required StructDataChanges changes = 3; // The specific properties that were updated
}

// Each transport function gets its own datatype.
message Event {
    oneof data {
        ConstructorData constructor = 1;
        DestructorData destructor = 2;
        UpdateModelData update_model = 3;
        ProcessStructData process_struct = 4;
    }
}

// I can return multiple events of any type. This may be filtered in the future. TODO: Verify this comment.
message ReturnTransport {
    repeated Event vec = 1;
    repeated string errors = 2;
}

// This message is the actual message that will be sent to/from any interfaces
message RequestTransport {
    required ModuleId moduleId = 1;  // This will populate using the TypeDescriptor map so we know the module receiving this.
    required Event event = 2;
}
