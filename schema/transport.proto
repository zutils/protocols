syntax = "proto2";

// This Schema represents how data will be sent to and from all foreign interfaces.
//  It will allow data to be sent to dynamic libraries, wasm, and locally

message TypeDescriptor {
    required string libraryAlias = 1;  // alias for the Ipfs hash or url of a protobuf file
    required string structure = 2; // the actual structure name used to deserialize the data
}

message TransportError { required string val = 1; }

message ModuleId { required string val = 1; }

message DataChanges {
    required Id id = 1; // The parent model id
    required bytes serializedData = 2; // The actual data
    repeated string dirtyProperties = 3; // The properties that need updating
    
    // If we (as a model) change, we pass ourselves here, and our parent into modelId when returning.
    optional Id subModelId = 4;

    // If the object is not yet created, this will let us know how to create it.
    required TypeDescriptor descriptor = 5;
    
    // Keep track of who triggered this change all the way through. This will allow us to check for circular changes.
    //repeated Id triggerStack = 6; // TODO: Implement this feature!
}

message Id {
    required string id = 1;
}

message VecId { repeated Id vec = 1; }
message VecDataChanges { repeated DataChanges vec = 1; }

message Empty {}

enum RequestFunctionType {
    CONSTRUCTOR = 1;
    DESTRUCTOR = 2;
    UPDATE_DATA = 3;
    PROCESS = 4;
}

message RequestData {
    oneof data {
        DataChanges datachanges = 1;
        Id id = 2;
    }
}

message ReturnData {
    oneof data {
        TransportError error = 1;
        Empty empty = 2;
        VecDataChanges vecdatachanges = 3;
        VecId submodelids = 4;
        DataChanges datachanges = 5;
    }
}

message ReturnTransport {
    repeated ReturnData vec = 1;
}

// This message is the actual message that will be sent to/from any interfaces
message RequestTransport {
    required ModuleId moduleId = 1;  // This will populate using the TypeDescriptor so we know the module receiving this.
    required RequestData payload = 2;
    required RequestFunctionType requestFunctionType = 3;
}
