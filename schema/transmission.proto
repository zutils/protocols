syntax = "proto3";

// This Schema represents how data will be sent to and from all foreign interfaces.
//  It will allow personal modules to be sent to dynamic libraries, webasm, and locally
//  Please NOTE: This is an INSECURE method of transport. All destinations for these messages should be FULLY TRUSTED!

message Schema {
    oneof data {
        string URL = 2;
        string Ipfs = 3;
        string Ipns = 4;
    }
}

message UUID { string id = 1; }

message Error { string error = 1; }

// Include data and the schema that can decode it.
message Data {
    Schema decode_schema = 1;
    bytes serialized_data = 2;
}

// Include the method name and the serialized gRPC data.
message RpcData {
    string method_name = 1;
    bytes serialized_rpc_data = 2;
}

message ModuleInfo {
    Schema schema = 1;
    string name = 2;
}

message GenerateMessageInfo {
    string template = 1;
    repeated bytes args = 2;
}

message VecData { repeated Data vec = 1; }
message VecModuleInfo { repeated ModuleInfo vec = 1; }
message VecRpcData { repeated RpcData vec = 1; }
message Empty {}

enum RequestType {
    NONE = 0;
    GET_INFO = 1;
    GENERATE_DEFAULT_MESSAGE = 2;
    HANDLE_TRUSTED = 3;
    RECEIVE_TRUSTED_RPC = 4;
    RECEIVE_UNTRUSTED_RPC = 5;
}


// Because we don't support generics - have a oneof for each result. The calling function should know which one it is expecting.
message DataType {
    oneof result {
        Error error = 1;
        Data data = 2;
        VecModuleInfo vecmoduleinfo = 3;
        RpcData rpcdata = 4;
        GenerateMessageInfo generatemessageinfo = 5;
        Empty empty = 6;
        VecData vecdata= 7;
        VecRpcData vecdatarpc = 8;
    }
}

// Any module that wants to communicate to another module in it's tree must send and receive "Transmissions"
message Transmission {
    Schema destination = 1;
    DataType payload = 2;
    RequestType request_type = 3;
}

message VecTransmission { repeated Transmission vec = 1; }

service CommonModule {
    rpc get_info(Empty) returns (VecModuleInfo);
    rpc generate_default_message(GenerateMessageInfo) returns (Data);
    rpc handle_trusted(Data) returns (VecData);
    rpc receive_trusted_rpc(RpcData) returns (VecRpcData);
    rpc receive_untrusted_rpc(RpcData) returns (VecRpcData);
}

service TransportService {
    rpc get_info(Transmission) returns (Transmission);
    rpc generate_default_message(Transmission) returns (Transmission);
    rpc handle_trusted(Transmission) returns (Transmission);
    rpc receive_trusted_rpc(Transmission) returns (Transmission);
    rpc receive_untrusted_rpc(Transmission) returns (Transmission);
}